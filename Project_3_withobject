# International Course in Computational Physics 2014-2015
# TU Delft / Michigan State
# Lattice Boltzmann Simulation
#
# Sophie Hermans & Emma Gerritse
import numpy as np
from numpy.linalg import norm
import matplotlib.pyplot as plt; from matplotlib import cm

global M, rho, c, N_x, N_y, b, d, e, du_x

#Parameters
d = 2 #Dimension
b = 3**d #Number of directions
N_x = 45; N_y = 15 #System size
n = 1./9. #Initial particle density
c = 1. #Normalization squared
rho = 1.
M = 1.
du_x = 0.2 #Pressure (from left to right)
tau = 5. #Relaxation time
t_final = 25 #Total number of iteration steps
#Initialize directions
e = np.empty([b,d],dtype = int)
#For d2q9
cnt = 0
for i in [-1,0,1]:
    for j in [-1,0,1]:
        e[cnt] = [i,j]
        cnt += 1

#Initialize lattice of particle densities
#Initial particle density is one in every direction for every site
lattice = n * np.ones([N_x,N_y,b],dtype = float)
veloc = np.zeros([N_x,N_y,2],dtype = float)
weights = 1./36. * np.ones(b,dtype = float)
weights[4] = 4./9.; weights[1] = 1./9. ; weights[3] = 1./9. ; weights[5] = 1./9. ; weights[7] = 1./9. ;

#Defining an object
lower = 6
upper = 8
left = 20
right = 25

object_latt = np.zeros([N_x,N_y],dtype = int)
for x in range(left,right):
    for y in range(lower,upper):
        object_latt[x,y] = 1
        lattice[x,y] = np.zeros(b,dtype = float)
#Initialize boundaries

#Move the density n_i to the appropriate neighbour
def propagation(lattice):
    #Initialize a new lattice to store moved particles in
    lattice_new = np.zeros([N_x,N_y,b],dtype = float)
    for l in range(N_x):
        for m in range(N_y):
            for i in range(b):
                if (m+e[i,1] < 0) or (m+e[i,1] >= N_y): #Boundary at the tube wall
                    lattice_new[(l+e[i,0])%N_x, m, 8-i] += lattice[l, m, i]
                elif (object_latt[(l+e[i,0])%N_x,(m+e[i,1])%N_y] == 1):
                    if ((m+e[i,1] in range(lower, upper))and(l+e[i,0] in range(left, right))):
                        lattice_new[l,m,8-i] = lattice[l,m,i]
                    elif m+e[i,1] in range(lower, upper):
                        lattice_new[l+e[i,0], m, 8-1] += lattice[l, m, i]                         
                    elif l+e[i,0] in range(left, right):
                        lattice_new[l, m+e[i,1], 8-1] += lattice[l, m, i]                   
                else:
                    lattice_new[(l+e[i,0])%N_x, (m+e[i,1]), i] += lattice[l, m, i]
            #Calculate the velocities at each point
            veloc[l,m] = np.sum(np.dot(lattice[l,m],e),axis = 0)
    return lattice_new, veloc

#Calculate the equilibrium distribution at a point
def equilibrium(x,y,veloc):
    neq = np.zeros(b,dtype = float)
    for i in range(b):
        neq[i] = weights[i] * rho / M * (1 + 3./c*e[i,0]*veloc[x,y,0] + 
            9./(2.*c**2.)*e[i,0]*e[i,1]*veloc[x,y,0]*veloc[x,y,1] - 3./2.*veloc[x,y,0]**2./c)
    return neq

#Add a small velocity along the direction of the pressure gradient
def pressure_grad(x,y,veloc):
    veloc[x,y,0] += du_x
    return veloc

#Relax the densities at the points inside the system
def relax(x,y,lattice,veloc):
    for i in range(b):
        lattice[x,y,i] = (1. - 1./tau) * lattice[x,y,i] + equilibrium(x,y,veloc)[i]/tau
    return lattice
        
###############################################################################
###########################MAIN ITERATION RUN##################################
###############################################################################
for t in range(t_final):
    lattice = propagation(lattice)[0]
    veloc = propagation(lattice)[1] #some calculation of the velocities at each point?
    for x in range(N_x):
        for y in range(N_y):
            veloc = pressure_grad(x,y,veloc)
            lattice = relax(x,y,lattice,veloc)
    #if (t%1==0): # Visualization of particle density
    #    plt.legend()
    #    plt.show()
    #    plt.clf(); plt.imshow(np.sum(lattice,axis = 2).transpose(),cmap=cm.jet)
    #    plt.colorbar()
    #    plt.draw()
    if (t%1==0): # Visualization of x-velocity
        plt.figure(1)
        plt.legend()
        plt.show()
        plt.clf(); plt.imshow(veloc[:,:,0].transpose(),cmap=cm.jet,label = 'x-velocity')
        plt.colorbar()
        plt.draw()

#Get parabola
ave_veloc = np.sum(veloc[:,:,0],axis = 0)
y_coor = np.arange(N_y); y_coor_fit = np.arange(0,N_y-1,0.1)
plt.figure(2)
plt.xlabel('Average velocity: u_x')
plt.ylabel('y')
para_fit = np.polyfit(y_coor,ave_veloc,2)
print(para_fit)
fitted_curve = para_fit[0]*y_coor_fit**2 + para_fit[1]*y_coor_fit + para_fit[2]
plt.plot(ave_veloc,y_coor,'bo',fitted_curve, y_coor_fit,'r')
plt.show()
